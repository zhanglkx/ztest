匹配规则配置：
flight: [{

 pattern : xxxx, 

 template : yyyy,

keycode: zzz,

 beginVersion:‘8.0.0’， 

},{

 pattern : xxxx,

  template : yyyy,

keycode: zzz,

 beginVersion:‘8.0.0’，

},]



pattern：支持正则表达式的匹配规则，业务需要提供的是正则中的【规则】部分，不用提供修饰符如g,i,m  /【规则】/修饰符; 因为是正则表达式，所以如果url中有?+*[]等正则中有特殊含义的符号和用来转义的\都需要转义。

template：被拦截的URL如果匹配了pattern之后，参数可以带入到template，最终形成访问的URL B

keycode: 特征码,需要被拦截的原始url的任意一部分。多个配置可以用同一个keycode。keycode的引入是为了从两个方面提升匹配效率：1，如果url不包括keycode则不走拦截，直接走跳转逻辑；2，如果url包括keycode，则从keycode对应的一组配置中，依次去匹配pattern,并用template做replace。而不用去全部规则匹配一遍（目前全部规则可能有100+，单个keycode对应的规则不到10个。）

beginVersion：如果为空，则所有版本都起作用；如果不为空，则会做版本比对，大于等于beginVersion才做URL Mapping

   原有参数兼容

原URL会base64Encode之后，作为新的参数(cmapping_origin_url)，拼接在新URL之后。

   具体示例

配置：

ticket:[{

   pattern:"^/bus/index.html#bus/orderdetail(.*)\\?(.*)oid",

    template:"/rn_bus/crn_config?CRNModuleName=RN_Bus&CRNType=1&homePage=orderDetail$1&$2orderId",

    keycode:"bus/index.html",

   "beginVersion":"8.78.2"

}]



被拦截的URL:

openURL("/bus/index.html#bus/orderdetail111?222oid")



如果在客户端8.78.2或者之后，会被替换为

openURL(“/rn_bus/crn_config?CRNModuleName=RN_Bus&CRNType=1&homePage=orderDetail111&222orderId&cmapping_origin_url=L2J1cy9pbmRleC5odG1sI2J1cy9vcmRlcmRldGFpbDExMT8yMjJvaWQmbWFwcGluZ19ncm91cD10aWNrZXQ=”)
，现在有以上规则，给你两个 URL，一个是原地址，一个是重定向后的地址，根据以上规则，输出 json对象格式的数据，例如，我向你输入：原地址：file://webapp/wallet/index.html#transacthistory   重定向行后地址： /rn_wallet/_crn_config?CRNType=1&CRNModuleName=rn_wallet&initialPage=realname，你只需要回复{
    "pattern": "^\\/wallet\\/index\\.html\\#transacthistory(.*)",
    "template": "/rn_wallet/_crn_config?CRNType=1&CRNModuleName=rn_wallet&initialPage=realname$1",
    "keycode": "wallet/index.html",
    "beginVersion": "8.9.0"
}，并且注意 json 的转移字符，要求如下：1、输出要符合 json 格式，注意转义字符 2、你只需要输出或者回答 json 对象，其余的任何内容都不要输出，请牢记我的要求，你明白了吗